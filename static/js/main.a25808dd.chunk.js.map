{"version":3,"sources":["views/SingIn/index.jsx","services/GET/getEnterpriseWithFilters.js","components/Carousel/index.jsx","components/Enterprises/index.jsx","views/Home/index.jsx","views/Enterprise/index.jsx","services/GET/getEnterpriseWithIndex.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","handleUserInput","e","setState","target","name","value","handlePasswordState","preventDefault","state","isPasswordHidden","handleLogin","isLoading","postLogin","then","result","status","sessionStorage","setItem","headers","get","isUserLoggedIn","isLoginError","userData","Promise","resolve","reject","myHeaders","Headers","append","raw","JSON","stringify","email","password","fetch","method","body","redirect","response","catch","error","bind","getItem","clear","to","this","className","style","borderBottom","htmlFor","type","placeholder","autoComplete","onChange","onClick","Component","getEnterpriseWithFilters","pesquisa","requestOptions","nomeEmpresa","tipoEmpresa","json","Carousel","enterpriseTypeData","setButtonState","removeItem","getEnterpriseTypes","i","sortEnterpriseTypes","currentEnterpriseTypeId","enterprises","enterprise_type","id","currentEnterpriseTypeName","enterprise_type_name","enterpriseTypes","map","data","key","Enterprises","responseData","buttonhandle","enterpriseIndex","selectedEnterpriseIndex","isSearched","length","enterprise_name","city","Home","handleSingout","window","location","reload","handleUserKeyDown","handleFilter","isInputMode","spellCheck","onKeyDown","Enterprise","gerEnterpriseInfo","enterprise","description","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a25808dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './signIn.scss'\r\n\r\nclass SignIn extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            isLoading: false, \r\n            isPasswordHidden: true,\r\n            isUserLoggedIn: false,\r\n            isLoginError: false\r\n        }\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        if(!sessionStorage.getItem('isLoggedIn')){\r\n            sessionStorage.clear()\r\n        }\r\n    }\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    handlePasswordState = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(this.state.isPasswordHidden === true){\r\n            this.setState({\r\n                isPasswordHidden: false\r\n            });\r\n        }else{\r\n            this.setState({\r\n                isPasswordHidden: true\r\n            });\r\n\r\n        }\r\n    }\r\n    handleLogin = () => {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        this.postLogin(this.state).then ((result) => {\r\n            if(result.status === 200){\r\n                sessionStorage.setItem('access-token', result.headers.get('access-token'));\r\n                sessionStorage.setItem('client', result.headers.get('client'));\r\n                sessionStorage.setItem('uid', result.headers.get('uid'));\r\n                sessionStorage.setItem('isLoggedIn', true);\r\n\r\n                this.setState({\r\n                    isUserLoggedIn: true\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    isLoginError: true\r\n                })\r\n            };\r\n        });\r\n    }\r\n    postLogin = (userData) => {\r\n        return new Promise((resolve, reject) =>{        \r\n            let myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            let raw = JSON.stringify({\"email\": `${userData.email}`,\"password\": `${userData.password}`});\r\n              \r\n            let requestOptions = {\r\n              method: 'POST',\r\n              headers: myHeaders,\r\n              body: raw,\r\n              redirect: 'follow'\r\n            };\r\n        \r\n            fetch(\"https://empresas.ioasys.com.br/api/v1/users/auth/sign_in\", requestOptions)\r\n            .then((response) => {\r\n                this.setState({ isLoading: false });\r\n                resolve(response)\r\n            })\r\n            .catch((error) => {\r\n                this.setState({ isLoading: false });\r\n                reject(error)\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        if(sessionStorage.getItem('isLoggedIn')){\r\n            return(\r\n                <Redirect to=\"/home\"/>\r\n            );\r\n        }\r\n        let { isLoading } = this.state;\r\n\r\n        return(\r\n            <div className=\"sign-in\">\r\n                <form className={isLoading ? 'sign-in__form --blured' : 'sign-in__form' }>\r\n                    <div className=\"sign-in__logo\"/>\r\n                    <div className=\"sign-in__description-container\">\r\n                        <div className=\"sign-in__description\">\r\n                            <div className=\"sign-in__description-title\">\r\n                                <p>BEM-VINDO AO EMPRESAS</p>\r\n                            </div>\r\n                            <div className=\"sign-in__description-text\">\r\n                                <p>Lorem ipsum dolor sit amet, contetur adipiscing elit. Nunc accumsan.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sign-in__input-container\">\r\n                        <div \r\n                            className=\"sign-in__input\" \r\n                            style={{ borderBottom: this.state.isLoginError ? '.01vh solid #ff0f44' : '' }}\r\n                        >\r\n                            <label \r\n                                className=\"sign-in__input-label --email\"\r\n                                htmlFor=\"email\" \r\n                            />\r\n                            <input \r\n                                className=\"sign-in__input-email\"\r\n                                name=\"email\"\r\n                                type=\"text\" \r\n                                placeholder=\"E-mail\"  \r\n                                autoComplete=\"off\" \r\n                                onChange={this.handleUserInput}\r\n                            />\r\n                            <div className={this.state.isLoginError ? 'sign-in__input-status' : 'sign-in__input-status --invisible' }>!</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sign-in__input-container\">\r\n                        <div \r\n                            className=\"sign-in__input\" \r\n                            style={{ borderBottom: this.state.isLoginError ? '.01vh solid #ff0f44' : '' }}\r\n                        >\r\n                            <label \r\n                                className=\"sign-in__input-label --password\"\r\n                                htmlFor=\"password\" \r\n                            />\r\n                            <input \r\n                                className=\"sign-in__input-password\"  \r\n                                name=\"password\"                            \r\n                                type={this.state.isPasswordHidden ? 'password' : 'text' }  \r\n                                placeholder=\"Password\" \r\n                                autoComplete=\"off\" \r\n                                onChange={this.handleUserInput}\r\n                            />\r\n                            <button \r\n                                className={this.state.isLoginError ? '--hidden' : 'sign-in__input-reveal'} \r\n                                onClick={this.handlePasswordState}\r\n                            />\r\n                            <div className={this.state.isLoginError ? 'sign-in__input-status' : '--hidden' }>!</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={this.state.isLoginError ? 'sign-in__input-feedback' : 'sign-in__input-feedback --invisible' }>\r\n                        <p>Credenciais informadas são inválidas, tente novamente.</p>\r\n                    </div>\r\n                    <input \r\n                        className=\"sign-in__button\"                    \r\n                        type=\"button\" \r\n                        value=\"ENTRAR\" \r\n                        onClick={this.handleLogin}\r\n                    /> \r\n                </form>\r\n                \r\n                {isLoading ? (\r\n                    <div className=\"sign-in__loader\">\r\n                        <div className=\"sign-in__loader-spinner\"/>\r\n                    </div>  \r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn","export function getEnterpriseWithFilters(pesquisa) {\r\n    return new Promise((resolve, reject) =>{   \r\n        var myHeaders = new Headers();\r\n        \r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"access-token\", `${sessionStorage.getItem('access-token')}`);\r\n        myHeaders.append(\"client\", `${sessionStorage.getItem('client')}`);\r\n        myHeaders.append(\"uid\", `${sessionStorage.getItem('uid')}`);\r\n            \r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        if(pesquisa.nomeEmpresa !== '' && pesquisa.tipoEmpresa === null)\r\n        {\r\n            fetch(`https://empresas.ioasys.com.br/api/v1/enterprises?name=${pesquisa.nomeEmpresa}`, requestOptions)\r\n            .then((response) => {\r\n                resolve(response.json())\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            });\r\n        }\r\n        else\r\n        {\r\n            if(pesquisa.nomeEmpresa === '' && pesquisa.tipoEmpresa !==null )\r\n            {\r\n                fetch(`https://empresas.ioasys.com.br/api/v1/enterprises?enterprise_types=${pesquisa.tipoEmpresa}`, requestOptions)\r\n                .then((response) => {\r\n                    resolve(response.json())\r\n                })\r\n                .catch((error) => {\r\n                    reject(error)\r\n                });\r\n            }\r\n            else \r\n            {\r\n                if(pesquisa.nomeEmpresa !== '' && pesquisa.tipoEmpresa !==null)\r\n                {\r\n                    fetch(`https://empresas.ioasys.com.br/api/v1/enterprises?enterprise_types=${pesquisa.tipoEmpresa}&name=${pesquisa.nomeEmpresa}`, requestOptions)\r\n                    .then((response) => {\r\n                        resolve(response.json())\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n                }\r\n            }        \r\n        }                   \r\n   });\r\n}","import React, { Component } from 'react';\r\n\r\n//Services\r\nimport { getEnterpriseWithFilters } from '../../services/GET/getEnterpriseWithFilters'\r\n\r\n//Styles\r\nimport './carousel.scss'\r\n\r\nclass Carousel extends Component{\r\n    enterpriseTypeData = []\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            enterpriseTypes: []\r\n        }\r\n    \r\n    }\r\n    setButtonState = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(this.state[e.target.name] === false){\r\n            this.setState({\r\n                [e.target.name] : true\r\n            })\r\n            sessionStorage.setItem(\"enterpriseTypeValue\", e.target.value);\r\n        }else{\r\n            this.setState({\r\n                [e.target.name] : false\r\n            })\r\n            sessionStorage.removeItem(\"enterpriseTypeValue\");\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getEnterpriseTypes();\r\n    }\r\n    getEnterpriseTypes = () =>{\r\n        let pesquisa={\r\n            nomeEmpresa: '',\r\n            tipoEmpresa: null\r\n        }\r\n\r\n        for (let i = 1; i < 25; i++) {\r\n            pesquisa ={\r\n                nomeEmpresa: '',\r\n                tipoEmpresa: i\r\n            }\r\n            getEnterpriseWithFilters(pesquisa)\r\n            .then ((result) =>{\r\n                this.sortEnterpriseTypes(result)\r\n            });    \r\n        }\r\n    }\r\n    sortEnterpriseTypes = (result) => { \r\n        let currentEnterpriseTypeId = result.enterprises[0].enterprise_type.id;\r\n        let currentEnterpriseTypeName = result.enterprises[0].enterprise_type.enterprise_type_name;\r\n\r\n        this.enterpriseTypeData[currentEnterpriseTypeId] = currentEnterpriseTypeName;\r\n\r\n        this.setState({\r\n            enterpriseTypes: this.enterpriseTypeData,\r\n            [`button${currentEnterpriseTypeId}`]: false\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <ul className=\"carousel\">\r\n                {this.state.enterpriseTypes.map((data, i) => {\r\n                    return (\r\n                        <button \r\n                            className={this.state[`button${i}`] ? 'carousel__button --active' : 'carousel__button'} \r\n                            name={`button${i}`}\r\n                            type=\"button\" \r\n                            value={i}                            \r\n                            key={i} \r\n                            onClick={this.setButtonState}\r\n                        >\r\n                            {data}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </ul>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default Carousel","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './enterprises.scss'\r\n\r\nclass Enterprises extends Component{\r\n    responseData = []\r\n\r\n    buttonhandle = (enterpriseIndex) =>{\r\n        let selectedEnterpriseIndex = enterpriseIndex;\r\n\r\n        sessionStorage.setItem('selectedEnterpriseIndex', selectedEnterpriseIndex);\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isSearched === true){\r\n            this.responseData = this.props.responseData.enterprises\r\n\r\n            if(this.responseData.length > 0){\r\n                return(\r\n                    <ul className=\"enterprises\">\r\n                        {this.responseData.map((data, i) => {\r\n                            return (\r\n                                <Link \r\n                                    className=\"enterprise__button\" \r\n                                    key={i} \r\n                                    onClick={() => this.buttonhandle(data.id)} \r\n                                    to={`/empresa/${data.id}`}\r\n                                >\r\n                                    <div className=\"enterprise__button-logo\">{data.id}</div>\r\n                                    <div className=\"enterprise__button-info\">\r\n                                        <p className=\"enterprise__button-name\">{data.enterprise_name}</p> \r\n                                        <p className=\"enterprise__button-type\">{data.enterprise_type.enterprise_type_name}</p>\r\n                                        <p className=\"enterprise__button-country\">{data.city}</p> \r\n                                    </div>\r\n                                </Link>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            }else{\r\n                return(\r\n                    <div className=\"search\">\r\n                        <p className=\"search__notfound\">Nenhuma empresa foi encontrada para a busca realizada.</p>\r\n                    </div>\r\n                );\r\n            }\r\n        }else{\r\n            return(\r\n                <div className=\"search\">\r\n                    <p className=\"search__start\">Clique na busca para iniciar.</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Enterprises","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n//Components\r\nimport Carousel from '../../components/Carousel'\r\nimport Enterprises from '../../components/Enterprises'\r\n\r\n//Services\r\nimport { getEnterpriseWithFilters } from '../../services/GET/getEnterpriseWithFilters'\r\n\r\n//Styles\r\nimport './home.scss'\r\n\r\nclass Home extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            responseData: {},\r\n            nomeEmpresa: '',\r\n            isInputMode: false,\r\n            isSearched: false\r\n        }\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n    }\r\n    nomeEmpresa = ''\r\n    pesquisa ={\r\n        nomeEmpresa: '',\r\n        tipoEmpresa: null\r\n    }\r\n    componentDidMount() {\r\n        sessionStorage.removeItem('enterpriseName')\r\n        sessionStorage.removeItem('enterpriseTypeValue')\r\n        sessionStorage.removeItem('selectedEnterpriseIndex');\r\n    }\r\n    handleSingout = (e) => {\r\n        e.preventDefault();\r\n\r\n        sessionStorage.clear();\r\n        window.location.reload(false);\r\n    }\r\n    handleUserKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleFilter(e);\r\n        }\r\n    }\r\n    handleUserInput = (e) => {\r\n        this.nomeEmpresa = e.target.value\r\n    }\r\n    handleFilter = (e) => {   \r\n        this.pesquisa ={\r\n            nomeEmpresa: this.nomeEmpresa,\r\n            tipoEmpresa: sessionStorage.getItem(\"enterpriseTypeValue\")\r\n        }\r\n\r\n        if(e.target.value === \"search\"){\r\n            e.preventDefault();\r\n            this.setState({\r\n                isInputMode: true\r\n            })\r\n            getEnterpriseWithFilters(this.pesquisa)\r\n            .then ((result) =>{ \r\n                this.setState({\r\n                    responseData: result,\r\n                    isSearched: true\r\n                })\r\n            });\r\n    \r\n            if(this.state.nomeEmpresa !== ''){\r\n                sessionStorage.setItem('enterpriseName', this.state.nomeEmpresa)\r\n            }\r\n        }else{\r\n            if(e.target.value === \"close\"){\r\n                e.preventDefault();\r\n                this.setState({\r\n                    isInputMode: false\r\n                }) \r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        if(!sessionStorage.getItem('isLoggedIn')){\r\n            return(\r\n                <Redirect to=\"/login\"/>\r\n            );\r\n        }\r\n        let { isInputMode } = this.state\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"navbar\">\r\n                    <div className={ isInputMode ? \"navbar__input --input-mode\" : \"navbar__input\"}>\r\n                        <button \r\n                            className={ isInputMode ? \"--hidden\" : \"navbar__sing-out\"}\r\n                            onClick={this.handleSingout}\r\n                        />\r\n                        <div className={ isInputMode ? \"--hidden\" : \"navbar__logo\"}/>\r\n                        <button \r\n                            className=\"filter__button --search \" \r\n                            value=\"search\" \r\n                            onClick={this.handleFilter} \r\n                        />\r\n                        <input \r\n                            className={ isInputMode ? \"filter__search\" : \"--hidden\"} \r\n                            name=\"nomeEmpresa\" \r\n                            type=\"text\" \r\n                            placeholder=\"Pesquisar\" \r\n                            spellCheck=\"false\" \r\n                            onKeyDown={this.handleUserKeyDown} \r\n                            onChange={this.handleUserInput}\r\n                        />\r\n                        <button \r\n                            className={ isInputMode ? \"filter__button --close \" : \"--hidden\"} \r\n                            value=\"close\" \r\n                            onClick={this.handleFilter}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Carousel />\r\n                <Enterprises \r\n                    responseData={this.state.responseData} \r\n                    isSearched={this.state.isSearched}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\r\nimport { Link, Redirect} from 'react-router-dom';\r\n\r\n//Serivces\r\nimport { getEnterpriseWithIndex } from '../../services/GET/getEnterpriseWithIndex'\r\n\r\n//Styles\r\nimport './enterprise.scss'\r\n\r\nclass Enterprise extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            enterprise: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if(sessionStorage.getItem('isLoggedIn')){\r\n            this.gerEnterpriseInfo()\r\n        }\r\n    }\r\n    gerEnterpriseInfo = () => {\r\n        let selectedEnterpriseIndex = sessionStorage.getItem('selectedEnterpriseIndex');\r\n\r\n        getEnterpriseWithIndex(selectedEnterpriseIndex).then ((result) => {\r\n            this.setState({\r\n                enterprise: result.enterprise\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(!sessionStorage.getItem('isLoggedIn')){\r\n            return(\r\n                <Redirect to=\"/login\"/>\r\n            );\r\n        }\r\n        let { enterprise } = this.state \r\n        return(\r\n            <div className=\"result\">\r\n                <div className=\"result__navbar\">\r\n                    <Link \r\n                        className=\"result__backtrack\" \r\n                        to=\"/home\"\r\n                    />\r\n                    <div className=\"result__enterprise-name\">{enterprise.enterprise_name}</div>\r\n                </div>\r\n                <div className=\"result__description\">\r\n                    <div className=\"result__description-thumbnail\">\r\n                        <span>{enterprise.enterprise_name}</span>\r\n                    </div>\r\n                    <div className=\"result__description-text\">\r\n                        <p>{enterprise.description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Enterprise","export function getEnterpriseWithIndex(enterpriseIndex) {\r\n    return new Promise((resolve, reject) =>{   \r\n        var myHeaders = new Headers();\r\n        \r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"access-token\", `${sessionStorage.getItem('access-token')}`);\r\n        myHeaders.append(\"client\", `${sessionStorage.getItem('client')}`);\r\n        myHeaders.append(\"uid\", `${sessionStorage.getItem('uid')}`);\r\n            \r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(`https://empresas.ioasys.com.br/api/v1/enterprises/${enterpriseIndex}`, requestOptions)\r\n        .then((response) => {\r\n            resolve(response.json())\r\n        })\r\n        .catch((error) => {\r\n            reject(error)\r\n        });                 \r\n   });\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n//Views\r\nimport SignIn from './views/SingIn'\r\nimport Home from './views/Home'\r\nimport Enterprise from './views/Enterprise'\r\n\r\n\r\n//Styles\r\nimport './App.scss';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={SignIn} />\r\n        <Route exact path=\"/login\" component={SignIn} />\r\n        <Route exact path=\"/home\" component={Home} />\r\n        <Route path=\"/empresa/:empresaId\" component={Enterprise} />\r\n      </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}