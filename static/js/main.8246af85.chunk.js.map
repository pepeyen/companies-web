{"version":3,"sources":["views/SingIn/index.jsx","services/getEnterpriseWithFilters.js","components/Carousel/index.jsx","components/Enterprises/index.jsx","views/Home/index.jsx","views/Enterprise/index.jsx","services/getEnterpriseWithIndex.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","useState","email","setEmail","password","setPassword","isLoading","setIsLoading","isPasswordHidden","setIsPasswordHidden","isUserLoggedIn","setIsUserLoggedIn","isLoginError","setIsLoginError","useEffect","sessionStorage","getItem","clear","handleUserInput","e","target","name","value","handleUserLogin","keyCode","handleLogin","postLogin","then","res","status","setItem","headers","get","userData","Promise","resolve","reject","myHeaders","Headers","append","requestOptions","method","body","JSON","stringify","redirect","fetch","process","response","catch","error","to","className","style","borderBottom","htmlFor","type","placeholder","autoComplete","onChange","onKeyDown","onClick","preventDefault","getEnterpriseWithFilters","searchedEnterprise","nomeEmpresa","tipoEmpresa","json","Carousel","props","enterpriseTypeData","setButtonState","setState","selectedType","getEnterpriseTypes","i","result","sortEnterpriseTypes","enterprises","length","currentEnterpriseTypeId","enterprise_type","id","currentEnterpriseTypeName","enterprise_type_name","enterpriseTypes","state","this","map","data","key","Component","Enterprises","responseData","isSearched","enterpriseIndex","selectedEnterpriseIndex","entepriseToBeShown","enterprise_name","city","Home","setResponseData","setNomeEmpresa","isInputMode","setIsInputMode","isSearching","setIsSearching","setIsSearched","removeItem","searchEnterprise","getEnterprise","window","location","reload","spellCheck","Enterprise","enterprise","setEnterprise","getEnterpriseInfo","description","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8246af85.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './signIn.scss';\r\n\r\nfunction SignIn() {\r\n    const [email,setEmail] = useState('');\r\n    const [password,setPassword] = useState('');\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    const [isPasswordHidden,setIsPasswordHidden] = useState(true);\r\n    const [isUserLoggedIn,setIsUserLoggedIn] = useState(false);\r\n    const [isLoginError,setIsLoginError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(!sessionStorage.getItem('isLoggedIn')){\r\n            sessionStorage.clear();\r\n        }\r\n    },[]);\r\n\r\n    const handleUserInput = (e) => {\r\n        switch (e.target.name) {\r\n            case \"email\":\r\n                setEmail(e.target.value);\r\n\r\n                break;\r\n            case \"password\":\r\n                setPassword(e.target.value);\r\n                \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const handleUserLogin = (e) => {\r\n        if(e.keyCode === 13){\r\n            handleLogin();\r\n        }\r\n    }\r\n    const handlePasswordState = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(isPasswordHidden === true){\r\n            setIsPasswordHidden(false);\r\n        }else{\r\n            setIsPasswordHidden(true);\r\n        }\r\n    }\r\n    const handleLogin = () => {\r\n        setIsLoading(true);\r\n        \r\n        let userData = {\r\n            email: email,\r\n            password: password\r\n        }\r\n\r\n        postLogin(userData)\r\n        .then((res) => {\r\n            if(res.status === 200){\r\n                sessionStorage.setItem('access-token', res.headers.get('access-token'));\r\n                sessionStorage.setItem('client', res.headers.get('client'));\r\n                sessionStorage.setItem('uid', res.headers.get('uid'));\r\n                sessionStorage.setItem('isLoggedIn', true);\r\n\r\n                setIsUserLoggedIn(true);\r\n            }else{\r\n                setIsLoginError(true);\r\n            };\r\n        });\r\n    }\r\n    const postLogin = (userData) => {\r\n        return new Promise((resolve, reject) =>{        \r\n            let myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\r\n            let raw = JSON.stringify({\"email\": `${userData.email}`,\"password\": `${userData.password}`});\r\n              \r\n            let requestOptions = {\r\n              method: 'POST',\r\n              headers: myHeaders,\r\n              body: raw,\r\n              redirect: 'follow'\r\n            };\r\n        \r\n            fetch(`${process.env.REACT_APP_API_PROXY}/${process.env.REACT_APP_API_URL}/users/auth/sign_in`, requestOptions)\r\n            .then((response) => {\r\n                setIsLoading(false);\r\n                resolve(response)\r\n            })\r\n            .catch((error) => {\r\n                setIsLoading(false);\r\n                setIsLoginError(true);\r\n                reject(error)\r\n            });\r\n        });\r\n    }\r\n\r\n    if(sessionStorage.getItem('isLoggedIn') || isUserLoggedIn === true){\r\n        return(\r\n            <Redirect to=\"/home\"/>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className=\"sign-in\">\r\n                <form className={isLoading ? 'sign-in__form --blured' : 'sign-in__form' }>\r\n                    <div className=\"sign-in__logo\"/>\r\n                    <div className=\"sign-in__description-container\">\r\n                        <div className=\"sign-in__description\">\r\n                            <div className=\"sign-in__description-title\">\r\n                                <p>BEM-VINDO AO EMPRESAS</p>\r\n                            </div>\r\n                            <div className=\"sign-in__description-text\">\r\n                                <p>Lorem ipsum dolor sit amet, contetur adipiscing elit. Nunc accumsan.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sign-in__input-container\">\r\n                        <div \r\n                            className=\"sign-in__input\" \r\n                            style={{borderBottom: isLoginError ? '.01vh solid #ff0f44' : '' }}\r\n                        >\r\n                            <label \r\n                                className=\"sign-in__input-label --email\"\r\n                                htmlFor=\"email\" \r\n                            />\r\n                            <input \r\n                                className=\"sign-in__input-email\"\r\n                                name=\"email\"\r\n                                type=\"text\" \r\n                                placeholder=\"E-mail\"  \r\n                                autoComplete=\"off\" \r\n                                onChange={handleUserInput}\r\n                                onKeyDown={handleUserLogin}\r\n                            />\r\n                            <div className={isLoginError ? 'sign-in__input-status' : 'sign-in__input-status --invisible' }>!</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sign-in__input-container\">\r\n                        <div \r\n                            className=\"sign-in__input\" \r\n                            style={{borderBottom: isLoginError ? '.01vh solid #ff0f44' : '' }}\r\n                        >\r\n                            <label \r\n                                className=\"sign-in__input-label --password\"\r\n                                htmlFor=\"password\" \r\n                            />\r\n                            <input \r\n                                className=\"sign-in__input-password\"  \r\n                                name=\"password\"                            \r\n                                type={isPasswordHidden ? 'password' : 'text' }  \r\n                                placeholder=\"Password\" \r\n                                autoComplete=\"off\" \r\n                                onChange={handleUserInput}\r\n                                onKeyDown={handleUserLogin}\r\n                            />\r\n                            <button \r\n                                className={isLoginError ? '--hidden' : 'sign-in__input-reveal'} \r\n                                onClick={handlePasswordState}\r\n                            />\r\n                            <div className={isLoginError ? 'sign-in__input-status' : '--hidden' }>!</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={isLoginError ? 'sign-in__input-feedback' : 'sign-in__input-feedback --invisible' }>\r\n                        <p>Credenciais informadas são inválidas, tente novamente.</p>\r\n                    </div>\r\n                    <input \r\n                        className=\"sign-in__button\"                    \r\n                        type=\"button\" \r\n                        value=\"ENTRAR\" \r\n                        onClick={handleLogin}\r\n                    /> \r\n                </form>\r\n                \r\n                {isLoading ? (\r\n                    <div className=\"sign-in__loader\">\r\n                        <div className=\"sign-in__loader-spinner\"/>\r\n                    </div>  \r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn","export function getEnterpriseWithFilters(searchedEnterprise) {\r\n    return new Promise((resolve, reject) =>{   \r\n        var myHeaders = new Headers();\r\n        \r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"access-token\", `${sessionStorage.getItem('access-token')}`);\r\n        myHeaders.append(\"client\", `${sessionStorage.getItem('client')}`);\r\n        myHeaders.append(\"uid\", `${sessionStorage.getItem('uid')}`);\r\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\r\n            \r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        if(searchedEnterprise.nomeEmpresa !== '' && searchedEnterprise.tipoEmpresa === null)\r\n        {\r\n            fetch(`${process.env.REACT_APP_API_PROXY}/${process.env.REACT_APP_API_URL}/enterprises?name=${searchedEnterprise.nomeEmpresa}`, requestOptions)\r\n            .then((response) => {\r\n                resolve(response.json())\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            });\r\n        }\r\n        else\r\n        {\r\n            if(searchedEnterprise.nomeEmpresa === '' && searchedEnterprise.tipoEmpresa !==null )\r\n            {\r\n                fetch(`${process.env.REACT_APP_API_PROXY}/${process.env.REACT_APP_API_URL}/enterprises?enterprise_types=${searchedEnterprise.tipoEmpresa}`, requestOptions)\r\n                .then((response) => {\r\n                    resolve(response.json())\r\n                })\r\n                .catch((error) => {\r\n                    reject(error)\r\n                });\r\n            }\r\n            else \r\n            {\r\n                if(searchedEnterprise.nomeEmpresa !== '' && searchedEnterprise.tipoEmpresa !==null)\r\n                {\r\n                    fetch(`${process.env.REACT_APP_API_PROXY}/${process.env.REACT_APP_API_URL}/enterprises?enterprise_types=${searchedEnterprise.tipoEmpresa}&name=${searchedEnterprise.nomeEmpresa}`, requestOptions)\r\n                    .then((response) => {\r\n                        resolve(response.json())\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n                }\r\n            }        \r\n        }                   \r\n   });\r\n}","import React, { Component } from 'react';\r\n\r\n//Services\r\nimport { getEnterpriseWithFilters } from '../../services/getEnterpriseWithFilters'\r\n\r\n//Styles\r\nimport './carousel.scss'\r\n\r\nclass Carousel extends Component{\r\n    enterpriseTypeData = []\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            enterpriseTypes: [],\r\n            selectedType: ''\r\n        }\r\n    \r\n    }\r\n    setButtonState = (e) => {\r\n        e.preventDefault();\r\n        \r\n        this.setState({\r\n            selectedType : e.target.name\r\n        })\r\n        sessionStorage.setItem(\"enterpriseTypeValue\", e.target.value);\r\n    }\r\n    componentDidMount() {\r\n        this.getEnterpriseTypes();\r\n    }\r\n    getEnterpriseTypes = () =>{\r\n        let searchedEnterprise={\r\n            nomeEmpresa: '',\r\n            tipoEmpresa: null\r\n        }\r\n\r\n        for (let i = 1; i < 30; i++) {\r\n            searchedEnterprise ={\r\n                nomeEmpresa: '',\r\n                tipoEmpresa: i\r\n            }\r\n            getEnterpriseWithFilters(searchedEnterprise)\r\n            .then ((result) =>{\r\n                this.sortEnterpriseTypes(result)\r\n            });   \r\n        }\r\n    }\r\n    sortEnterpriseTypes = (result) => { \r\n        if(result.enterprises.length !== 0){\r\n            let currentEnterpriseTypeId = result.enterprises[0].enterprise_type.id;\r\n            let currentEnterpriseTypeName = result.enterprises[0].enterprise_type.enterprise_type_name;\r\n    \r\n            this.enterpriseTypeData[currentEnterpriseTypeId] = currentEnterpriseTypeName;\r\n    \r\n            this.setState({\r\n                enterpriseTypes: this.enterpriseTypeData,\r\n                [`button${currentEnterpriseTypeId}`]: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <ul className=\"carousel\">\r\n                {this.state.enterpriseTypes.map((data, i) => {\r\n                    return (\r\n                        <button \r\n                            className={this.state.selectedType === `button${i}` ? 'carousel__button --active' : 'carousel__button'} \r\n                            name={`button${i}`}\r\n                            type=\"button\" \r\n                            value={i}                            \r\n                            key={i} \r\n                            onClick={this.setButtonState}\r\n                        >\r\n                            {data}\r\n                        </button>\r\n                    )\r\n                })}\r\n            </ul>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default Carousel","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './enterprises.scss'\r\n\r\nfunction Enterprises(props) {\r\n    let responseData = [];\r\n\r\n    const entepriseToBeShown = (enterpriseIndex) =>{\r\n        let selectedEnterpriseIndex = enterpriseIndex;\r\n\r\n        sessionStorage.setItem('selectedEnterpriseIndex', selectedEnterpriseIndex);\r\n    }\r\n\r\n    if(props.isSearched === true){\r\n        responseData = props.responseData.enterprises\r\n        \r\n        if(responseData.length > 0){\r\n            return(\r\n                <ul className=\"enterprises\">\r\n                    {responseData.map((data, i) => {\r\n                        return (\r\n                            <Link \r\n                                className=\"enterprise__button\" \r\n                                key={i} \r\n                                onClick={() => entepriseToBeShown(data.id)} \r\n                                to={`/empresa/${data.id}`}\r\n                            >\r\n                                <div className=\"enterprise__button-logo\">{data.id}</div>\r\n                                <div className=\"enterprise__button-info\">\r\n                                    <p className=\"enterprise__button-name\">{data.enterprise_name}</p> \r\n                                    <p className=\"enterprise__button-type\">{data.enterprise_type.enterprise_type_name}</p>\r\n                                    <p className=\"enterprise__button-country\">{data.city}</p> \r\n                                </div>\r\n                            </Link>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            );\r\n        }else{\r\n            return(\r\n                <div className=\"search\">\r\n                    <p className=\"search__notfound\">Nenhuma empresa foi encontrada para a busca realizada.</p>\r\n                </div>\r\n            );\r\n        }\r\n    }else{\r\n        return(\r\n            <div className=\"search\">\r\n                <p className=\"search__start\">Clique na busca para iniciar.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Enterprises","import React, { useState,useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n//Components\r\nimport Carousel from '../../components/Carousel'\r\nimport Enterprises from '../../components/Enterprises'\r\n\r\n//Services\r\nimport { getEnterpriseWithFilters } from '../../services/getEnterpriseWithFilters'\r\n\r\n//Styles\r\nimport './home.scss'\r\n\r\nfunction Home() {\r\n    const [responseData,setResponseData] = useState({});\r\n    const [nomeEmpresa,setNomeEmpresa] = useState('');\r\n    const [isInputMode,setIsInputMode] = useState(false);\r\n    const [isSearching,setIsSearching] = useState(false);\r\n    const [isSearched,setIsSearched] = useState(false);\r\n\r\n    let searchedEnterprise = {\r\n        nomeEmpresa: '',\r\n        tipoEmpresa: null\r\n    }\r\n\r\n    useEffect(() => {\r\n        sessionStorage.removeItem('enterpriseTypeValue');\r\n        sessionStorage.removeItem('selectedEnterpriseIndex');\r\n    },[]);\r\n\r\n    const handleSingout = (e) => {\r\n        e.preventDefault();\r\n\r\n        sessionStorage.clear();\r\n        window.location.reload(false);\r\n    }\r\n    const handleUserKeyDown = (e) => {\r\n        setNomeEmpresa(e.target.value);\r\n\r\n        if (e.keyCode === 13) {\r\n            searchEnterprise(e);\r\n        }\r\n    }\r\n    const searchEnterprise = (e) => {\r\n        searchedEnterprise = {\r\n            nomeEmpresa: nomeEmpresa,\r\n            tipoEmpresa: sessionStorage.getItem(\"enterpriseTypeValue\")\r\n        }\r\n        \r\n        if(e.keyCode === 13){\r\n            getEnterprise(searchedEnterprise)\r\n        }\r\n\r\n        switch (e.target.value) {\r\n            case \"showInput\":\r\n                setIsInputMode(true);\r\n\r\n                break;\r\n            case \"search\":\r\n                e.preventDefault();\r\n                getEnterprise(searchedEnterprise);\r\n\r\n                break;\r\n            case \"close\":\r\n                e.preventDefault();\r\n                setIsInputMode(false);\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }        \r\n    }\r\n    const getEnterprise = () => {\r\n        setIsSearching(true);\r\n        \r\n        getEnterpriseWithFilters(searchedEnterprise)\r\n        .then ((res) =>{ \r\n            setResponseData(res);\r\n            setIsSearching(false);\r\n            setIsSearched(true);\r\n        });\r\n    }\r\n\r\n    if(!sessionStorage.getItem('isLoggedIn')){\r\n        return(\r\n            <Redirect to=\"/login\"/>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"navbar\">\r\n                    <div className={isInputMode ? \"navbar__input --input-mode\" : \"navbar__input\"}>\r\n                        <button \r\n                            className={isInputMode ? \"--hidden\" : \"navbar__sing-out\"}\r\n                            onClick={handleSingout}\r\n                        />\r\n                        <div className={ isInputMode ? \"--hidden\" : \"navbar__logo\"}/>\r\n                        <button \r\n                            className=\"filter__button --search \" \r\n                            value={isInputMode ? \"search\" : \"showInput\"}\r\n                            onClick={searchEnterprise} \r\n                        />\r\n                        <input \r\n                            className={isInputMode ? \"filter__search\" : \"--hidden\"} \r\n                            name=\"nomeEmpresa\" \r\n                            type=\"text\" \r\n                            placeholder=\"Pesquisar\" \r\n                            spellCheck=\"false\" \r\n                            onKeyDown={handleUserKeyDown} \r\n                        />\r\n                        <button \r\n                            className={isInputMode ? \"filter__button --close \" : \"--hidden\"} \r\n                            value=\"close\" \r\n                            onClick={searchEnterprise}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <Carousel />\r\n                <Enterprises \r\n                    responseData={responseData} \r\n                    isSearching = {isSearching}\r\n                    isSearched={isSearched}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\n//Serivces\r\nimport { getEnterpriseWithIndex } from '../../services/getEnterpriseWithIndex'\r\n\r\n//Styles\r\nimport './enterprise.scss'\r\n\r\nfunction Enterprise() {\r\n    const [enterprise,setEnterprise] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(sessionStorage.getItem('isLoggedIn')){\r\n            getEnterpriseInfo()\r\n        }\r\n    },[])\r\n\r\n    const getEnterpriseInfo = () => {\r\n        let selectedEnterpriseIndex = sessionStorage.getItem('selectedEnterpriseIndex');\r\n\r\n        getEnterpriseWithIndex(selectedEnterpriseIndex)\r\n        .then((res) => {\r\n            setEnterprise(res.enterprise);\r\n        });\r\n    }\r\n\r\n    if(!sessionStorage.getItem('isLoggedIn')){\r\n        return(\r\n            <Redirect to=\"/login\"/>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className=\"result\">\r\n                <div className=\"result__navbar\">\r\n                    <Link \r\n                        className=\"result__backtrack\" \r\n                        to=\"/home\"\r\n                    />\r\n                    <div className=\"result__enterprise-name\">{enterprise.enterprise_name}</div>\r\n                </div>\r\n                <div className=\"result__description\">\r\n                    <div className=\"result__description-thumbnail\">\r\n                        <span>{enterprise.enterprise_name}</span>\r\n                    </div>\r\n                    <div className=\"result__description-text\">\r\n                        <p>{enterprise.description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ); \r\n    }\r\n}\r\nexport default Enterprise","export function getEnterpriseWithIndex(enterpriseIndex) {\r\n    return new Promise((resolve, reject) =>{   \r\n        var myHeaders = new Headers();\r\n        \r\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"access-token\", `${sessionStorage.getItem('access-token')}`);\r\n        myHeaders.append(\"client\", `${sessionStorage.getItem('client')}`);\r\n        myHeaders.append(\"uid\", `${sessionStorage.getItem('uid')}`);\r\n            \r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n        \r\n        fetch(`${process.env.REACT_APP_API_PROXY}/${process.env.REACT_APP_API_URL}/enterprises/${enterpriseIndex}`, requestOptions)\r\n        .then((response) => {\r\n            resolve(response.json())\r\n        })\r\n        .catch((error) => {\r\n            reject(error)\r\n        });                 \r\n   });\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n//Views\r\nimport SignIn from './views/SingIn'\r\nimport Home from './views/Home'\r\nimport Enterprise from './views/Enterprise'\r\n\r\n\r\n//Styles\r\nimport './App.scss';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={SignIn} />\r\n        <Route exact path=\"/login\" component={SignIn} />\r\n        <Route exact path=\"/home\" component={Home} />\r\n        <Route path=\"/empresa/:empresaId\" component={Enterprise} />\r\n      </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\n//Styles\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}